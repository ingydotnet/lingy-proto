#!/usr/bin/env perl6

class Compiler { ... }
class Runtime { ... }
class Function { ... }
class Stash { ... }

class Stash {
    has %.sym;
    has $.outer;
    method find($sym) {
        %.sym.exists_key($sym)
            ?? %.sym{$sym}
            !! $.outer
                ?? $.outer.find($sym)
                !! die "Cannot find $sym"
    }
    method bind($sym, $value) {
        %.sym{$sym} = $value;
    }
}

class Compiler {
    method compile($source) {
        my $unit = eval($source);
        my $runtime = Runtime.new;
        $runtime.stash.bind(
            'MAIN',
            Function.new(
                outer => $runtime.stash,
                param => [],
                statements => $unit,
            ),
        );
        return $runtime;
    }
}

multi run($, Str $s) { $s }
multi run($s, [$op, *@operands]) {
    my ($ns, $name) = split ':', $op;
    given $s.find($ns) {
        when Callable { $_($s, @operands) }
        default { ."{$name // 'new'}"($s, @operands) }
    }
}

class Function {
    has $.outer;
    has @.params;
    has @.statements;
    method invoke(*@args) {
        my $s = Stash.new(outer => $.outer);
        for @.params Z @args -> $p, $a {
            $s.bind($p, $a);
        }
        for @.statements {
            run($s, $_)
        }
    }
}

class Runtime {
    has $.stash = Stash.new(sym => (
        set => -> $s, @o {
            $s.bind(@o[0], run($s, @o[1]))
        },
        get => -> $s, @o { $s.find(@o[0]) },
        say => -> $s, @o { say run($s, @o[0]) },
        Str => class {
            method cat($s, [$a, $b]) {
                run($s, $a) ~ run($s, $b)
            }
        },
        List => class {
            method new($s, @o) { @o.map(&run.assuming($s)) }
            method each($s, [$list, $mapper]) {
                run($s, $list).map(-> $v { run($s, $mapper).invoke($v) })
            }
        },
        Fun => class {
            method new($s, [@params, *@statements]) {
                Function.new(
                    outer => $s,
                    :@params,
                    :@statements)
            }
        },
    ));
    method run {
        $.stash.find('MAIN').invoke();
    }
}

sub MAIN($program) {
    Compiler.compile(slurp $program).run()
}
